# This file contains all available configuration options
# with their default values.

# options for analysis running
run:
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 1m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: false

  # list of build tags, all linters use it. Default is empty list.
  # build-tags: []

  # which dirs to skip: issues from them won't be reported;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but default dirs are skipped independently
  # from this option's value (see skip-dirs-use-default).
  skip-dirs:
    - assets

  # default is true. Enables skipping of directories:
  #   vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs-use-default: true

  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  # skip-files: []
  # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  # modules-download-mode: readonly|release|vendor

linters:
  # please, do not use `enable-all`: it's deprecated and will be removed soon.
  # inverted configuration with `enable-all` and `disable` is not scalable during updates of golangci-lint
  disable-all: true
  enable:
    - asciicheck
    - bodyclose
    - deadcode
    - depguard
    - dogsled
    - dupl
    - durationcheck
    - errcheck
    - errorlint
    - exhaustive
    - exportloopref
    - forcetypeassert
    - gci
    - gochecknoinits
    - goconst
    - gocritic
    - godot
    - godox
    - goerr113
    - gofmt
    - gofumpt
    - goheader
    - goimports
    - gomnd
    - gomodguard
    - goprintffuncname
    - gosec
    - gosimple
    - govet
    - ifshort
    - importas
    - ineffassign
    - lll
    - makezero
    - misspell
    - nakedret
    - nestif
    - nilerr
    - nlreturn
    - noctx
    - nolintlint
    - paralleltest
    - prealloc
    - predeclared
    - revive
    - rowserrcheck
    - sqlclosecheck
    - staticcheck
    - structcheck
    - stylecheck
    - testpackage
    - thelper
    - tparallel
    - typecheck
    - unconvert
    - unparam
    - unused
    - varcheck
    - wastedassign
    - whitespace
    - wrapcheck
    - wsl

    # ==> don't enable:
  # - cyclop
  # - forbidigo
  # - funlen
  # - gochecknoglobals
  # - gocognit
  # - gocyclo

  # ==> deprecated and will be removed soon:
  # - exhaustivestruct
  # - interfacer
  # - maligned

# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate, default is "colored-line-number"
  format: colored-line-number

  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name in the end of issue text, default is true
  print-linter-name: true

# all available settings of specific linters
linters-settings:
  # asciicheck:
  # bodyclose:
  # deadcode:

  depguard:
    list-type: blacklist
    include-go-root: true
    packages-with-error-messages:
      github.com/sirupsen/logrus: "logging is allowed only by logutils.Log"

  dogsled:
    # checks assignments with too many blank identifiers; default is 2
    max-blank-identifiers: 2

  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 100

  # durationcheck:

  errcheck:
    # report about not checking of errors in type assetions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: false

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: false

    # path to a file containing a list of functions to exclude from checking
    # see https://github.com/kisielk/errcheck#excluding-functions for details
    # exclude: /path/to/file.txt

  # errorlint:
  # exhaustive:
  # exportloopref:
  # forcetypeassert:

  # funlen:
  #   lines: 120
  #   statements: 85

  # gci:
  # gochecknoinits:

  goconst:
    # minimal length of string constant, 3 by default
    min-len: 2
    # minimal occurrences count to trigger, 3 by default
    min-occurrences: 2

  gocritic:
    # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.
    # Empty list by default. See https://github.com/go-critic/go-critic#usage -> section "Tags".
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style

    # Which checks should be enabled; can't be combined with 'disabled-checks';
    # See https://go-critic.github.io/overview#checks-overview
    # To check which checks are enabled run `GL_DEBUG=gocritic golangci-lint run`
    # By default list of stable checks is used.
    # enabled-checks:
    #   - rangeValCopy

    # Which checks should be disabled; can't be combined with 'enabled-checks'; default is empty
    disabled-checks:
      - wrapperFunc
      - dupImport # https://github.com/go-critic/go-critic/issues/845
      - ifElseChain
      - octalLiteral

    settings: # settings passed to gocritic
      captLocal: # must be valid enabled check name
        paramsOnly: true
      rangeValCopy:
        sizeThreshold: 32

  # godot:

  godox:
    # report any comments starting with keywords, this is useful for TODO or FIXME comments that
    # might be left in the code accidentally and should be resolved before merging
    keywords: # default keywords are TODO, BUG, and FIXME, these can be overwritten by this setting
      - BUG
      - FIXME
      - HACK
      - NOTE
      - OPTIMIZE
      - TODO
      - "@todo"

  # goerr113:

  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true

  # gofumpt:
  # goheader:

  goimports:
    # put imports beginning with prefix after 3rd-party packages;
    # it's a comma-separated list of prefixes
    local-prefixes: github.com/skyzyx/terraform-registry.alfredworkflow

  golint:
    # minimal confidence for issues, default is 0.8
    min-confidence: 0

  # gomnd:
  # gomodguard:
  # goprintffuncname:
  # gosec:
  # gosimple:

  govet:
    # report about shadowed variables
    check-shadowing: true

    # settings per analyzer
    # run `go tool vet help` to see all analyzers
    # run `go tool vet help printf` to see available settings for `printf` analyzer
    settings:
      asmdecl: {}
      assign: {}
      atomic: {}
      bools: {}
      buildtag: {}
      composites:
        whitelist: true
      copylocks: {}
      # errorsas: {}
      loopclosure: {}
      lostcancel: {}
      nilfunc: {}
      printf:
        funcs: true
      shift: {}
      stdmethods: {}
      structtag: {}
      unmarshal: {}
      unreachable: {}
      unsafeptr: {}
      unusedresult:
        funcs: true
        stringmethods: true

  # ifshort:
  # importas:
  # ineffassign:

  lll:
    # max line length, lines longer will be reported. Default is 120.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option
    line-length: 120
    # tab width in spaces. Default to 1.
    tab-width: 1

  # makezero:

  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Default is to use a neutral variety of English.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    locale: US
    # ignore-words:
    #   - someword

  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
    max-func-lines: 30

  nestif:
    min-complexity: 10

  # nilerr:
  # nlreturn:
  # noctx:
  # nolintlint:
  # paralleltest:
  # prealloc:
  # predeclared:
  # revive:
  # rowserrcheck:
  # staticcheck:
  # structcheck:
  # stylecheck:
  # testpackage:
  # thelper:
  # tparallel:
  # typecheck:
  # unconvert:

  unparam:
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false

  unused:
    # treat code as a program (not a library) and report unused exported identifiers; default is false.
    # XXX: if you enable this setting, unused will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find funcs usages. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: true

  # varcheck:
  # wastedassign:

  whitespace:
    multi-if: false # Enforces newlines (or comments) after every multi-line if statement
    multi-func: false # Enforces newlines (or comments) after every multi-line function signature

  # wrapcheck:
  wsl:
    # If true append is only allowed to be cuddled if appending value is
    # matching variables, fields or types on line above. Default is true.
    strict-append: true

    # Allow calls and assignments to be cuddled as long as the lines have any
    # matching variables, fields or types. Default is true.
    allow-assign-and-call: true

    # Allow multiline assignments to be cuddled. Default is true.
    allow-multiline-assign: true

    # Allow declarations (var) to be cuddled.
    allow-cuddle-declarations: false

    # Allow trailing comments in ending of blocks
    allow-trailing-comment: false

    # Force newlines in end of case at this limit (0 = never).
    force-case-trailing-whitespace: 0

    # Force cuddling of err checks with err var assignment
    force-err-cuddling: true

    # Allow leading comments to be separated with empty liens
    allow-separated-leading-comment: false

issues:
  # List of regexps of issue texts to exclude, empty list by default.
  # But independently from this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`. To list all
  # excluded by default patterns execute `golangci-lint run --help`
  exclude:
    - "should have a package comment"
    - 'declaration of "(err|ctx)" shadows declaration at'
    - "`Println` arg list ends with redundant newline"
    - "Println arg list ends with redundant newline"
    - "type jsonschema.Schema has no field or method ValidateBytes"
    - "declarations should never be cuddled"
    - "unnamedResult: consider giving a name to these results"

  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    - linters:
        - lll
      source: "lint:ignore-length"

    - linters:
        - gosec
      source: "lint:allow_666"

    - linters:
        - gosec
      source: "lint:allow_possible_insecure"

    - linters:
        - unparam
      source: "lint:allow_param"

    - linters:
        - deadcode
        - unused
      source: "lint:allow_dead"

    - linters:
        - gomnd
      source: "lint:allow_raw_number"

    - linters:
        - gocritic
      source: "lint:ignore_criticism"

    - linters:
        - nestif
      source: "lint:allow_nesting"

    - linters:
        - dupl
      source: "lint:no_dupe"

    - linters:
        - wsl
      source: "lint:allow_cuddling"

    - linters:
        - goerr113
      source: "lint:allow_errorf"

    - linters:
        - wrapcheck
      source: "lint:allow_unwrapped_errors"

    - text: "(SA1019|G402)"
      linters:
        - staticcheck
        - gosec
      source: "lint:allow_tls_min_version"

    - text: "(G404)"
      linters:
        - gosec
      source: "lint:not_crypto"

    - text: "(hugeParam)"
      linters:
        - gocritic
      source: "lint:allow_large_memory"

  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  exclude-use-default: false

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing
  # large codebase. It's not practical to fix all existing issues at the moment
  # of integration: much better don't allow issues in new code.
  # Default is false.
  new: false
  # Show only new issues created after git revision `REV`
  # new-from-rev: REV
  # Show only new issues created in git patch with set file path.
  # new-from-patch: path/to/patch/file
